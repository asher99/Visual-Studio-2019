{"version":3,"sources":["chat.js","welcome.js","serviceWorker.js","index.js"],"names":["Chat","Component","constructor","match","super","componentDidMount","document","body","classList","toggle","this","setState","name","getShortName","userName","socketIOClient","state","endpoint","on","message","arr","allMessages","push","send","newMessage","type","content","time","getTime","sendMessage","emit","params","updateMessage","bind","componentWillUnmount","remove","e","target","value","render","className","length","renederMessages","placeholder","onChange","onClick","Glyphicon","glyph","date","Date","getHours","getMinutes","getSeconds","short","split","forEach","charAt","toUpperCase","map","getMessage","key","Welcome","updateName","id","action","method","to","disabled","Boolean","window","location","hostname","App","exact","path","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5e5067b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport './style.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Glyphicon } from 'react-bootstrap';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nclass Chat extends Component {\r\n  constructor({match}) {\r\n    super();\r\n    this.userName = match.params;\r\n    this.state = {\r\n      endpoint: \"localhost:4001\",\r\n      message:'',\r\n      name:'',\r\n      allMessages:[]\r\n    };\r\n  \r\n  \r\n\r\n    this.updateMessage = this.updateMessage.bind(this);\r\n  \r\n  }\r\n\r\n  componentDidMount = () => {\r\n\t   document.body.classList.toggle('chat');\r\n\t   \r\n     this.setState({name: this.getShortName(this.userName.name)});\r\n      const socket = socketIOClient(this.state.endpoint);\r\n      \r\n      socket.on('message', (message) => {\r\n\t\t  if(message.name !== this.state.name)\r\n\t\t  {\r\n\t\t\t let arr = this.state.allMessages;\r\n\t\t\t  arr.push(message);\r\n\t\t\t  this.setState({allMessages: arr});\r\n\t\t  }\r\n      })\r\n\r\n  }\r\n  componentWillUnmount() {\r\n    document.body.classList.remove('chat')\r\n  }\r\n\r\n\r\n   updateMessage(e) {\r\n      this.setState({message: e.target.value});\r\n   }\r\n\r\n  render() {\r\n    const socket = socketIOClient(this.state.endpoint);\r\n    return (\r\n    <div className=\"container-fluid h-100\">\r\n\t\t\t<div className=\"row justify-content-center h-100\">\r\n\t\t\t\r\n\t\t\t\t<div className=\"col-md-8 col-xl-6 chat\">\r\n\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t<div className=\"card-header msg_head\">\r\n\t\t\t\t\t\t\t<div className=\"d-flex bd-highlight\">\r\n\t\t\t\t\t\t\t\t<div className=\"img_cont\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-circle user_img userNameCard\">{this.state.name}</div>\r\n\t\t\t\t\t\t\t\t\t<span className=\"online_icon\"></span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"user_info\">\r\n\t\t\t\t\t\t\t\t\t<span>Chat</span>\r\n\t\t\t\t\t\t\t\t\t<p>{this.state.allMessages.length} Messages</p>\r\n                  \r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"card-body msg_card_body\">\r\n\r\n            {this.renederMessages()}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"card-footer\">\r\n\t\t\t\t\t\t\t<div className=\"input-group\">\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<textarea name=\"\" className=\"roundCorner form-control type_msg \" placeholder=\"Type your message...\"  value = {this.state.message} \r\n               onChange = {this.updateMessage}></textarea>\r\n\t\t\t\t\t\t\t\t<div className=\"input-group-append\">\r\n\t\t\t\t\t\t\t\t\t<span onClick={this.send}className=\"input-group-text send_btn costumSendBtn\"><Glyphicon             \r\n                      glyph=\"send\"/></span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    \r\n    );\r\n\r\n\r\n  }\r\n  send = ()=>\r\n  { \r\n    let newMessage={\r\n    type:'send',\r\n    content:this.state.message,\r\n    name:this.state.name,\r\n    time: this.getTime()\r\n   }\r\n   let arr = this.state.allMessages;\r\n   arr.push(newMessage);\r\n   this.setState({allMessages: arr});\r\n   this.setState({message: ''});\r\n\r\n    let sendMessage = {...newMessage};\r\n    sendMessage.type = \"recieve\";\r\n    const socket = socketIOClient(this.state.endpoint);\r\n    socket.emit('message', sendMessage)\r\n\r\n  }\r\n  getTime(){\r\n    let date = new Date();\r\n    return date.getHours()+\":\"+date.getMinutes()+\":\"+date.getSeconds();\r\n  }\r\n\r\n  getShortName(name){\r\n    let short = '';\r\n    let arr = name.split(\" \")\r\n    arr.forEach(function(name) {\r\n      short+=name.charAt(0);\r\n    });\r\n    return short.toUpperCase();\r\n    \r\n  }\r\n\r\n  renederMessages(){\r\n    return this.state.allMessages.map(message=>this.getMessage(message));\r\n  }\r\n\r\n  getMessage(message){\r\n    if(message.type == 'send'){\r\n\r\n      return <div key={message.time} className=\"d-flex justify-content-end mb-4\">\r\n\t\t\t\t\t\t\t\t<div className=\"msg_cotainer_send\">\r\n\t\t\t\t\t\t\t\t\t{message.content}\r\n\t\t\t\t\t\t\t\t\t<span className=\"msg_time_send\">{message.time}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"img_cont_msg\">\r\n\t\t\t\t\t\t\t<div className=\"rounded-circle user_img_msg littleCircle\">{this.state.name}</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>;\r\n    }\r\n\r\n    if(message.type == 'recieve'){\r\n\r\n      return <div key={message.time} className=\"d-flex justify-content-start mb-4\">\r\n\t\t\t\t\t\t\t\t<div className=\"img_cont_msg\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"rounded-circle user_img_msg littleCircleStart\">{message.name}</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"msg_cotainer\">\r\n\t\t\t\t\t\t\t\t\t{message.content}\r\n\t\t\t\t\t\t\t\t\t<span className=\"msg_time\">{message.time}</span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>;\r\n    }\r\n\r\n \r\n\r\n\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n\r\n","import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\r\nimport './welcome.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass Welcome extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name:''\r\n    };\r\n\r\n this.updateName = this.updateName.bind(this);\r\n  \r\n  }\r\n\r\n  updateName(e) {\r\n      this.setState({name: e.target.value});\r\n   }\r\n\r\n   \r\n\r\n  render() {\r\n    return (\r\n      \r\n     <div className=\"container\">\r\n        <div className=\"login-container\">\r\n              <div id=\"output\"></div>\r\n              <div className=\"avatar\">{this.getShortName(this.state.name)}</div>\r\n              <div className=\"form-box\">\r\n                  <form action=\"\" method=\"\">\r\n                      <input name=\"user\" type=\"text\"  value = {this.state.name} \r\n               onChange = {this.updateName} placeholder=\"username\"/>\r\n                      <input type=\"password\" placeholder=\"password\"/>\r\n                      <Link to = {'/chat/'+this.state.name}>\r\n                      <button className=\"btn btn-info btn-block login\"  disabled = {this.state.name == ''}>Login</button>\r\n                      </Link>\r\n                  </form>\r\n              </div>\r\n          </div>\r\n      </div>\r\n   \r\n    \r\n    );\r\n\r\n\r\n  }\r\n\r\ngetShortName(name){\r\n    let short = '';\r\n    let arr = name.split(\" \")\r\n    arr.forEach(function(name) {\r\n      short+=name.charAt(0);\r\n    });\r\n    return short.toUpperCase();\r\n    \r\n  }\r\n  \r\n}\r\nexport default Welcome;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport {BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom';\nimport Chat from './chat';\nimport Welcome from './welcome';\nimport './style.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Glyphicon } from 'react-bootstrap';\n\nimport * as serviceWorker from './serviceWorker';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      message:''\n    };\n\n \n  \n  }\n\n   updateMessage(e) {\n      this.setState({message: e.target.value});\n   }\n\n  render() {\n    return (\n   // <Chat></Chat>\n      <Router>\n        <div>\n          <Switch>\n              <Route exact path='/' component={Welcome} />\n              <Route exact path='/chat/:name' component={Chat} />\n          </Switch>\n          </div>\n      </Router>\n    \n    );\n\n\n  }\n\n\n  \n}\n\nrender(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}